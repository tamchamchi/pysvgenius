import re
import xml.etree.ElementTree as ET
from io import BytesIO
from itertools import product

import vtracer
from .base import IImageToConverter
from PIL import Image

from utils.image_utils import compute_ssim_images, resize_image, svg_to_png


class VtracerConverter(IImageToConverter):
    """
    A converter class that transforms raster images into optimized SVG vector graphics
    using vtracer with hyperparameter search and postprocessing.

    Attributes:
        default_svg (str): Fallback SVG content if conversion fails.
        max_size (int): Maximum allowed size (in bytes) for output SVG.
        speckle_values (list[int]): List of speckle filter values to sweep.
        layer_diff_values (list[int]): List of layer difference values to sweep.
        color_precision_values (list[int]): List of color precision values to sweep.
    """

    def __init__(self, max_size: int = 10000):
        """
        Initialize the converter with optional maximum SVG size.

        Args:
            max_size (int): Maximum allowed size for output SVG in bytes.
        """
        self.default_svg = """<svg width="256" height="256" viewBox="0 0 256 256"><circle cx="50" cy="50" r="40" fill="red" /></svg>"""
        self.max_size = max_size
        self.speckle_values = [10, 20, 40]
        self.layer_diff_values = [64, 128]
        self.color_precision_values = [4, 5, 6]

    def _postprocess_svg(self, svg_code: str) -> str:
        """
        Post-process the SVG string by removing unnecessary metadata.

        Operations include:
            - Removing the XML declaration line.
            - Removing the `version` attribute from the root <svg> tag.

        Args:
            svg_code (str): Raw SVG string generated by vtracer.

        Returns:
            str: Cleaned and minified SVG string.
        """
        ET.register_namespace("", "http://www.w3.org/2000/svg")
        tree = ET.ElementTree(ET.fromstring(svg_code))
        root = tree.getroot()

        if "version" in root.attrib:
            del root.attrib["version"]

        output = BytesIO()
        tree.write(output, encoding="utf-8", xml_declaration=True)
        result_svg = output.getvalue().decode("utf-8")

        result_svg = re.sub(r"<\?xml[^>]+\?>\s*", "", result_svg)

        return result_svg

    def _convert_image_to_svg(self, image: Image.Image) -> str:
        """
        Convert a single image to an SVG string by running vtracer with
        multiple hyperparameter combinations and selecting the best result
        based on SSIM similarity and file size constraints.

        Args:
            image (Image.Image): Input PIL image to be vectorized.

        Returns:
            str: Best matching SVG string after conversion and postprocessing.
        """
        best_ssim = -1
        best_svg = self.default_svg
        best_size = 0

        img_rgba = image.convert("RGBA")
        resized_img = resize_image(image=img_rgba, size=(384, 384))
        pixels = list(resized_img.getdata())

        for filter_speckle, layer_difference, color_precision in product(self.speckle_values, self.layer_diff_values, self.color_precision_values):
            svg_str = vtracer.convert_pixels_to_svg(
                rgba_pixels=pixels,
                size=resized_img.size,
                colormode="color",
                hierarchical="stacked",
                mode="polygon",
                filter_speckle=filter_speckle,
                color_precision=color_precision,
                layer_difference=layer_difference,
                corner_threshold=60,
                length_threshold=4.0,
                max_iterations=10,
                splice_threshold=45,
                path_precision=8,
            )

            ssim_score = compute_ssim_images(
                svg_to_png(svg_code=svg_str), image)

            byte_len = len(svg_str.encode("utf-8"))

            if byte_len <= self.max_size and byte_len > best_size:
                if best_ssim <= ssim_score:
                    best_ssim = ssim_score
                    best_svg = self._postprocess_svg(svg_str)
                    best_size = byte_len

        return best_svg

    def process(self, images: list[Image.Image]) -> list[str]:
        """
        Convert a list of PIL images to their corresponding optimized SVG strings.

        Args:
            images (list[Image.Image]): List of images to convert.

        Returns:
            list[str]: List of SVG strings corresponding to each input image.
        """
        result = []
        for image in images:
            output = self._convert_image_to_svg(image)
            result.append(output)

        return result
